@import "system/utilities";

@mixin close {
  background: yellow;
  color: $palette--primary-grey;
}
@mixin correct {
  background: green;
  color: $palette--primary-white;
}
@mixin wrong {
  background: black;
  color: $palette--primary-white;
}

@keyframes copied-click {
  0% {
    clip-path: inset(50% 50%);
  }
  50% {
    clip-path: inset(0% 0%);
  }
  99% {
    clip-path: inset(0% 0%);
  }
  100% {
    clip-path: inset(50% 50%);
  }
}

.board {
  overflow: hidden;
  padding: 0 $s1;
  transition-property: height;
}

#letter-frequency {
  span {
    text-wrap: nowrap;
  }
}

#untried-letters,
#options {
  display: flex;
  flex-wrap: wrap;

  span {
    position: relative;
    display: inline-block;
    padding: #{$s1 / 2} $s1;
    margin: $s1;
    border: 2px solid $palette--divider-color;
    cursor: pointer;

    @include link-hover;

    &::before {
      content: 'Copied';
      position: absolute;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background: $palette--accent-color;
      color: $palette--primary-grey;
      @include type--heading-5;
      display: flex;
      align-items: center;
      justify-content: center;
      clip-path: inset(50% 50%);
    }

    &.animate::before {
      animation-duration: 1500ms;
      animation-iteration-count: 1;
      animation-timing-function: $transition-timing;
      animation-name: copied-click;
    }
  }
}

.line {
  display: grid;
  grid-template-columns: repeat(5, 60px);
  justify-content: center;
  align-items: center;
  padding: $s2 0;

  @include mq-max(375px) {
    grid-template-columns: repeat(5, 58px);
  }

  fieldset {
    display: grid;
    grid-template-columns: 1fr;
    justify-content: center;
    align-items: center;
    gap: 2px;
    padding: 4px;
  }
}

.game-board {
  text-align: center;
}

fieldset {
  label {
    display: block;
    padding: 0;
    height: $s4;
    position: relative;
    margin-bottom: 0;

    &[for^="close"] {
      @include close;
    }
    &[for^="correct"] {
      @include correct;
    }
    &[for^="wrong"] {
      @include wrong;
    }
  }
  input[type=radio] {
    appearance: none;
    padding: 0;
    margin: 0;
    border: none;
    display: block;
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;
    width: 100%;
    background-color: inherit;
    color: inherit;

    &:checked::before {
      content: 'âœ“';
      height: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      background-color: inherit;
      color: inherit;
    }
  }
}

input.letter {
  @include type--heading-1;
  text-align: center;
  width: $s10;
  height: $s10;
  line-height: $s10;
  min-width: 0;
  padding: 0;
  margin-bottom: 0;

  &[data-state="wrong"] {
    @include wrong;
  }
  &[data-state="close"] {
    @include close;
  }
  &[data-state="correct"] {
    @include correct;
  }
}

toast-notification {
  position: fixed;
  bottom: -100px;
  right: 0;
  display: block;
  width: 100%;
  opacity: 0;
  z-index: 10;
  transition-property: bottom, opacity;

  &.animate {
    opacity: 1;
    bottom: 0px;
  }

  .nbar {
    display: inline-block;
    background: $palette--accent-color;
    color: $palette--primary-grey;
    padding: $s2 $s4;
    margin-bottom: $s2;
  }
}
