---
title: "Sticky Stacky Peeking Navigation Bars"
description: "At the time of writing I work at store.google.com. One of our design choices has been for the navigation to scroll with you. As the user scrolls down, one could have the navigation bars stack up. This pattern could fill the screen. Instead, this alternative design only shows the bottom most bar. As the user scrolls up, the navigation bars from above peek out from anywhere on the page."
date: 2022-07-08
priority: 0.8
pageClasses:
  - 'thoughts sticky-stacky'
layout: base
styles:
  - 'main'
---


<p>
  This is a common design pattern. As I have fixed bugs with store.google.com's navigation bar, I have reconsidered how complex the setup is. Here, I present a simpler, more general, and scalable way to support such a system.
</p>

<div class="sticky-container h3">
  <nav class="sticky-stacky default-styles">How does it work?</nav>
</div>

<section>
  <div class="content">
    <p>
      At its core, this system is not complex. The markup is basic, as is the styles. The javascript can be challenging to wrap your head around, since it has to keep up with the scroll state.
    </p>
  </div>
</section>

<div class="sticky-container h3">
  <nav class="sticky-stacky default-styles">What do you need for the markup?</nav>
</div>

<section>
  <div class="content">
    <ol>
      <li>A container that holds the height and position of the navigation bar on the page.</li>
      <li>The actual visible navigation bar that sticks when scrolling.</li>
    </ol>
    <%- code(`<div class="sticky-container">
  <div class="sticky-stacky">Sticky Nav Element</div>
</div>`, { language: 'html' }); %>
  </div>
</section> 

<div class="sticky-container h3">
  <nav class="sticky-stacky default-styles">What do you need for the styles?</nav>
</div>

<section>
  <div class="content">
    <p>
      For the container element, your styles are simple: a block element that holds the height of your navigation bar. Through some experimenting, I found a good way to smooth rendering, and simplify the javascript. We calculate the height and store it in a CSS variable.
    </p>
    <p>
      For the navigation bar itself, the styles are still simple. You need a basic default state, and a fixed state. The default state uses <var>position: relative</var>. The fixed state moves it to <var>position: fixed</var>. The important piece keeps the navigation bars sticking in the right positions.
    </p>
    <p> 
      To keep them sticking in the right positions, we depend on two properties. The <var>top</var> property is the sum of the heights of previous navigation bars. Again, I am using a CSS variable for simplicity. The <var>transform</var> property uses another CSS variable to translate the nav bar up and down. This translation handles the peeking logic. The CSS variable we use here will be quite dynamic, and updated with JavaScript.
    </p>
    <%- code(getFileContents('/styles/modules/_sticky-stacky.scss'), { language: 'css' }); %>
  </div>
</section>

<div class="sticky-container h3">
  <nav class="sticky-stacky default-styles">The JavaScript that drives the scrolling behavior.</nav>
</div>

<section>
  <div class="content">
    <p>
      Breaking the algorithm into two pieces is the most organized. A class that controls all the sticky navigation bars on the page: StickyController. And a class that updates each sticky navigation bar: StickyStacky.
    </p>
    <p>
      Read through the comments in the JavaScript below. The explanation makes the most sense to me in context.
    </p>
    <%- code(getFileContents('/js/_modules/sticky-stacky.js'), { language: 'javascript' }); %>
  </div>
</section>

<div class="sticky-container h3">
  <nav class="sticky-stacky default-styles">Conclusion</nav>
</div>

<section>
  <div class="content">
    <p>I hope this has been a helpful and informative way to combine JavaScript, HTML, and CSS in a robust and scalable way. The patterns I use in this solution are more valuable than the solution itself.</p>
  </div>
</section>
