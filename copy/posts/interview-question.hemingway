{"entityMap":{"0":{"type":"IMAGE","mutability":"MUTABLE","data":{"src":"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 640 960'%3E%3C/svg%3E","data-src":"/images/posts/interview-question/ios7-on-iphone4.webp","alt":"Screen capture of iPhone 4 with iOS 7 installed"}},"1":{"type":"LINK","mutability":"MUTABLE","data":{"href":"/example/float-no-vws-iphone/"}},"2":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://developer.mozilla.org/en-US/docs/Web/CSS/float"}},"3":{"type":"LINK","mutability":"MUTABLE","data":{"href":"/example/float-iphone/"}},"4":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://www.w3.org/TR/css-values-4/#vw"}},"5":{"type":"LINK","mutability":"MUTABLE","data":{"href":"/example/flex-iphone/"}},"6":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://developer.mozilla.org/en-US/docs/Glossary/Flexbox"}},"7":{"type":"LINK","mutability":"MUTABLE","data":{"href":"/example/grid-iphone/"}},"8":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://developer.mozilla.org/en-US/docs/Web/CSS/grid"}},"9":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://twitter.com/imbanders"}},"10":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://www.last.fm/user/iBrianAnders"}},"11":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://github.com/briananders"}},"12":{"type":"LINK","mutability":"MUTABLE","data":{"href":"https://www.linkedin.com/in/andersbrian/"}}},"blocks":[{"key":"e8i2k","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"3usu6","text":"The CSS interview question that is harder than it looks","type":"header-one","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"cenf5","text":"While interviewing candidates over the past 5 years, I made a CSS only interview question that is tricky. It's value is that it tests for more than programming competence.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"7l1be","text":"~","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[{"offset":0,"length":1,"key":0}],"data":{}},{"key":"34pau","text":"The task","type":"header-two","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"djqtj","text":"I provide the markup, below, and you style it to be a basic iPhone 4 layout. To make it reasonable, I want the flat layout of iOS 7. And you can ignore things like the status bar at the top, and all the images. This is a dumb prototype-like proof of concept. Make up the spacing values, I don’t care.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"ch6qq","text":"All I want is square apps that flow from left to right, wrapping into the next row, all spaced evenly. The space on the sides and top of the screen must match the space between the apps. Save the \"app name\" area for last. Almost no one gets that far anyway. Try to set up the dock as well.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"djqk3","text":"I say up front, \"You don’t need to look up anything. I can answer any question you will need to solve this. I am your Google. Ask me anything.\"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"1mrba","text":"\"Oh, and I want it to be responsive. Everything should resize proportionally based on the width of the screen.\"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"3gnqk","text":"\"...and no VWs.\"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"aqr7n","text":"The markup","type":"header-two","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"3672d","text":"<phone>\n  <main>\n    <app><name>name</name></app>\n    <app><name>name</name></app>\n    <app><name>name</name></app>\n    <app><name>name</name></app>\n    <app><name>name</name></app>\n    <app><name>name</name></app>\n    <app><name>name</name></app>\n    <app><name>name</name></app>\n    <app><name>name</name></app>\n  </main>\n  <dock>\n    <app><name>name</name></app>\n    <app><name>name</name></app>\n    <app><name>name</name></app>\n    <app><name>name</name></app>\n  </dock>\n</phone>","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":483,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"3glk1","text":"What happens","type":"header-two","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"4fli0","text":"At first glance, this is not much of a test at all. Almost every person I have interviewed smiled and jumped into coding up the styles. Then when they think they’re in a good spot, they refresh. And the screen is blank.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"vd0h","text":"Panic sets in. I can see the thoughts rush through their head: \"What the heck is going on?! What did I do wrong?!\"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"bl00b","text":"The demeanor of the interview changes. Now, I am testing their debugging skills. I can see how they handle stress, frustration, and pressure. They open up the browser’s dev console’s inspector, see what the browser picked up, and realize that their code is indeed being rendered. Then they start trying things in the dev console.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"4ib6m","text":"Excellent! I can see that this person at least knows about the dev console. And they are familiar enough to use it effectively. All good signs that this person is not completely lost. They must have spent some time in web development. And now I can see the different styles that they are trying to apply. I am learning about the breadth of their CSS knowledge, and how far outside the box that they think. This is exactly what I want to assess in this interview.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"49tg3","text":"What I really want to see is the behavior. Do they ask questions? It’s fine if they do that; it will not hurt their assessment. Do they get angry? A good interviewee will talk through their thought process; there is only so much one can glean from watching another person silently program.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"c57ch","text":"I have had individuals get frustrated and completely shut up. Not good.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"5p3vv","text":"I have had individuals get angry and complain about how they would never have set up the HTML this way, and that’s why they’re having trouble. Maybe true, but I don’t care. This is the challenge. To get the right answer, you don’t change the question.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9359d","text":"I have had people jump over and change the HTML without asking. And reminds them that they don’t need to change any of the HTML, and they inform him that it will be better this way. Ok? Good luck, I guess? \"Interviewee didn’t solve a single code challenge, but they did create their own challenges and solved those!\"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"e12jc","text":"I have only ever had one person solve this without help. I was impressed and had to add on other requirements to fill the time. They knows who they are, and I hope they read this someday.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"cdg0l","text":"The best outcome is that they start asking questions. As they get answers, they hopefully start applying that knowledge in the right place. And once they have that knowledge, hopefully they retain it, and use it later in the exercise.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"296cu","text":"The Reveal","type":"header-two","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9sken","text":"I doesn’t really care if they finish completely, but would like for them to get a certain amount of the way through the exercise. I usually finish the challenge for them, and explain how the different pieces of the solution work, pointing out where they were close, and why it was not technically correct.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"58lua","text":"I have had people argue with me. \"[Their] solution was correct, and it would have worked fine!\" I once spent 20 minutes after the interview had ended explaining to a person why my solution would have been mathematically incorrect, causing the layout to be a few fractions of a pixel out of alignment. I eventually understood the DOM parent/child relationship that was causing my % math to deteriorate. That was an attitude I wasn’t pleased with.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"74j8t","text":"I have had people who said that it was a dumb exercise, and was completely unrealistic to most web development situations. ¯\\_(ツ)_/¯","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"amufm","text":"And I have had people say, \"That was totally fascinating. I didn’t know about [thing], and I will never forget it now!\" This is the best attitude, obviously. I am happy to see their excitement at learning; and their lack of ego, which allows for them to learn without resenting me.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9cu37","text":"As a testament to my claim that \"he doesn’t really care if they finish completely\", most of the people on my team right now have had this interview question, and none of them finished without help. The guy that did solve it was hired, but has since moved on to other teams.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"a7cjv","text":"* * *","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"8t09c","text":"As far as I have been able to figure out, there’s only one way to solve this with the rules set above. But below, there are 4 different solutions: the first, is the \"correct\" solution, and the following solutions support newer CSS rules, and lose older browser support.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"46lfv","text":"* * *","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fgsio","text":"Shared across all examples","type":"header-two","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"ffk2b","text":"Because, we are used to standard HTML, that gets default browser styles, we forget that some styles need to be set. Using custom elements like <phone>, <app>, <dock>, etc is like naming a bunch of <span> elements. They are inline, have no padding/margin/width/height. We have to set those things.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"1fe3","text":"Similarly, we are used to CSS resets. You set up one thing, one time, to fix a bug. Then you forget that it ever happened, and how to fix it. We have to fix that too 😅. Usually, just the <body> (sometimes the <html> element) have default padding or margins set. We need to reset that.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"8ql8m","text":"This step, is why most people see a blank screen on the first try.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"408qs","text":"html, body {\n  margin: 0;\n  padding: 0;\n  color: white;\n  font-size: 100%;\n  font-family: sans-serif;\n}\nphone, main, dock, app, name {\n  display: block;\n  box-sizing: border-box;\n}","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":180,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"agv9c","text":"Float with no VWs","type":"header-two","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"eu7rn","text":"The main rub here is how to make squares, with even spacing that scales. Sometimes people start setting up rems or ems in concert with media queries to change the top level font-size. Clever, but no. No media queries are needed. That leaves us to use % units, right? But how do you make a square using percents? width in percents is based on the width of the element’s parent, and height in percents is based on the height of the element’s parent. For many many screen sizes, these won’t be squares... right? What’s missing?","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fehha","text":"Here’s the secret. Most people don’t know that padding, border, and margin definitions that use percent units are based on the parents width. So, if you set a top or bottom padding with percent values, that will be rendered based on the width of the parent. You'll be getting vertical adjustments based on horizontal values.","type":"unstyled","depth":0,"inlineStyleRanges":[{"offset":135,"length":5,"style":"ITALIC"}],"entityRanges":[],"data":{}},{"key":"72lgu","text":"In the examples below, apps will be 20% wide, with 4% gaps between them. 4 apps with 3 gaps, and the 2 sides. That adds up to 100%.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"c80mr","text":"/* The phone screen container */\nphone {\n  overflow: hidden;\n  position: relative;\n  width: 100%;\n  padding-top: 128%; /* 5 apps tall, 7 gap values */\n  /* height is 0. This is crucial. */\n}\n\n/* The top portion of the phone */\nmain {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n}\n\n/* The dock at the bottom of the screen */\ndock {\n  width: 100%;\n\n  /* Same space at the bottom as on the sides and between the apps */\n  padding-bottom: 4%;\n\n  /* lock the dock to the bottom of the screen */\n  position: absolute;\n  bottom: 0;\n  left: 0;\n}\n\n/* Each app square. This is the magic. */\napp {\n  /* Floating handles the automatic wrapping,\n     and the float aligns the elements\n     left to right, top to bottom */\n  float: left;\n\n  /* Arbitrary, but keeps the rounding consistent.\n     Using % makes it scale responsively */\n  border-radius: 20%;\n\n  /* To make a square, make the following values identical. */\n  width: 20%;\n  padding-top: 20%;\n\n  height: 0; /* crucial */\n\n  /* Set the top and left margins to the gap value.\n     Other apps will stack up behind nicely */\n  margin-left: 4%;\n  margin-top: 4%;\n}","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":1120,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"adih7","text":"Proof of concept","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[{"offset":0,"length":16,"key":1}],"data":{}},{"key":"fo2qo","text":"Float MDN reference","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[{"offset":0,"length":19,"key":2}],"data":{}},{"key":"9epd3","text":"Float with VWs","type":"header-two","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"4i1ss","text":"Viewport units are awesome, and they make this a lot easier. Basically, do the same stuff as the first example, but set everything using vw units. Set a height instead of padding-top.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"b256e","text":"You don’t have to, but you can use 2vw margins/padding (all the way around the elements) to maintain the 4vw gap, and make the DOM look more symmetrical when using the inspector.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"73mkj","text":"/* The phone screen container */\nphone {\n  overflow: hidden;\n  width: 100vw;\n  height: 128vw;\n}\n\n/* The top portion of the phone */\nmain {\n  width: 100vw;\n  padding: 2vw;\n\n  /* I set a height this time\n     since it’s easy with vw units */\n  height: 100vw;\n}\n\n/* The dock at the bottom of the screen */\ndock {\n  /* No need to position this absolutely\n     since the main element has a height set */\n  width: 100vw;\n  padding: 2vw;\n  height: 28vw; /* 1 app, 2 gaps */\n}\n\n/* Each app square. */\napp {\n  float: left;\n\n  border-radius: 20%; /* I left this as a percent */\n\n  width: 20vw;\n  height: 20vw;\n\n  margin: 2vw;\n}","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":617,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"953q4","text":"Proof of concept","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[{"offset":0,"length":16,"key":3}],"data":{}},{"key":"1kpkh","text":"Viewport Width unit (vw) W3C reference","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[{"offset":0,"length":38,"key":4}],"data":{}},{"key":"f9p4u","text":"Flexbox","type":"header-two","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"ev1ch","text":"Flexbox is pretty great in a lot of cases, but it’s not much better than the others so far. The code below is applied after extending the code from the \"Float with VWs\" example, above.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fqngp","text":"The main improvement is, the dock spacing works like iOS, when you have fewer than 4 apps in the dock. I went ahead and added the close button styles, app dancing animation and javascript in the proof of concept that lets you delete apps to see it.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"1ntbd","text":"/* The phone screen container */\nphone {\n  overflow: hidden;\n  width: 100vw;\n  height: 128vw;\n}\n\n/* Apply Flexbox rules to\n   the top portion of the phone &\n   the dock at the bottom of the screen */\nmain, dock {\n  width: 100vw;\n  display: flex;\n  padding: 2vw;\n  justify-content: flex-start;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n}\n\n/* The top portion of the phone */\nmain {\n  height: 100vw;\n}\n\n/* The dock at the bottom of the screen */\ndock {\n  height: 28vw;\n  justify-content: space-evenly;\n}\n\n/* Each app square. */\napp {\n  border-radius: 20%;\n  width: 20vw;\n  height: 20vw;\n  margin: 2vw;\n}","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":633,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"4to82","text":"Proof of concept","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[{"offset":0,"length":16,"key":5}],"data":{}},{"key":"2om78","text":"Flexbox MDN reference","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[{"offset":0,"length":21,"key":6}],"data":{}},{"key":"4j93e","text":"CSS Grid","type":"header-two","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"4ojcu","text":"CSS Grid is a powerful new* set of specs that make work like this a lot easier. We just need to describe the grid spacing, and set a couple of heights. Then the Grid just handles everything.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"d57m","text":"/* The phone screen container */\nphone {\n  /* Nothing needed here. */\n}\n\n/* The top portion of the phone */\nmain {\n  /* ✨ magic ✨ */\n  display: grid;\n\n  /* 4 columns, 4 rows */\n  grid-template-columns: repeat(4, 1fr);\n  grid-template-rows: repeat(4, 1fr);\n\n  height: 100vw;\n  width: 100vw;\n  grid-gap: 4vw; /* Space between apps */\n  padding: 4vw; /* Space around the edges */\n}\n\n/* The dock at the bottom of the screen */\ndock {\n  /* ✨ magic ✨ */\n  display: grid;\n\n  /* 4 columns */\n  grid-template-columns: repeat(4, 1fr);\n\n  height: 28vw;\n  width: 100vw;\n  grid-gap: 4vw; /* Space between apps */\n  padding: 4vw; /* Space around the edges */\n}\n\n/* Each app square. */\napp {\n  border-radius: 20%;\n  /* We don’t need to set the height or width.\n     The grid handles it */\n}","type":"code-block","depth":0,"inlineStyleRanges":[{"offset":0,"length":775,"style":"CODE"}],"entityRanges":[],"data":{}},{"key":"3kkfa","text":"Proof of concept","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[{"offset":0,"length":16,"key":7}],"data":{}},{"key":"7qpgg","text":"CSS Grid MDN reference","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[{"offset":0,"length":22,"key":8}],"data":{}},{"key":"7a8st","text":"Conclusion","type":"header-two","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fog2g","text":"Hopefully, the examples above were interesting and taught you some nifty tricks about CSS. Feel free to use this as a technical interview question; but also keep in mind that the solution is on the internet. 😁","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"cma0t","text":"Try to keep these gotchas in mind when you work on future projects. It could save you a headache.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"3k8hm","text":"© 2022","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"98n0t","text":"Twitter - Last.fm - Github - LinkedIn","type":"unordered-list-item","depth":0,"inlineStyleRanges":[],"entityRanges":[{"offset":0,"length":7,"key":9},{"offset":10,"length":7,"key":10},{"offset":20,"length":6,"key":11},{"offset":29,"length":8,"key":12}],"data":{}}]}